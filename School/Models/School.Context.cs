//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace School.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SchoolDBEntities : DbContext
    {
        public SchoolDBEntities()
            : base("name=SchoolDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Absence> Absence { get; set; }
        public DbSet<Admin> Admin { get; set; }
        public DbSet<Assignment> Assignment { get; set; }
        public DbSet<Class> Class { get; set; }
        public DbSet<Grade> Grade { get; set; }
        public DbSet<Material> Material { get; set; }
        public DbSet<Person> Person { get; set; }
        public DbSet<Situation_Subject> Situation_Subject { get; set; }
        public DbSet<Student> Student { get; set; }
        public DbSet<Subject> Subject { get; set; }
        public DbSet<Teacher> Teacher { get; set; }
        public DbSet<Teacher_Subject> Teacher_Subject { get; set; }
    
        public virtual int AddMaterial(Nullable<int> idMaterial, string type, Nullable<int> idAssignement)
        {
            var idMaterialParameter = idMaterial.HasValue ?
                new ObjectParameter("idMaterial", idMaterial) :
                new ObjectParameter("idMaterial", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var idAssignementParameter = idAssignement.HasValue ?
                new ObjectParameter("idAssignement", idAssignement) :
                new ObjectParameter("idAssignement", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMaterial", idMaterialParameter, typeParameter, idAssignementParameter);
        }
    
        public virtual int AdminAddPerson(Nullable<int> idPerson, string firstName, string lastName, string username, string password)
        {
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("idPerson", idPerson) :
                new ObjectParameter("idPerson", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminAddPerson", idPersonParameter, firstNameParameter, lastNameParameter, usernameParameter, passwordParameter);
        }
    
        public virtual int AdminAddStudent(Nullable<int> idPerson, Nullable<int> fkClass)
        {
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("idPerson", idPerson) :
                new ObjectParameter("idPerson", typeof(int));
    
            var fkClassParameter = fkClass.HasValue ?
                new ObjectParameter("fkClass", fkClass) :
                new ObjectParameter("fkClass", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminAddStudent", idPersonParameter, fkClassParameter);
        }
    
        public virtual int AdminAddStudentWithPerson(Nullable<int> idStudent, Nullable<int> fkClass, string firstName, string lastName, string username, string password)
        {
            var idStudentParameter = idStudent.HasValue ?
                new ObjectParameter("idStudent", idStudent) :
                new ObjectParameter("idStudent", typeof(int));
    
            var fkClassParameter = fkClass.HasValue ?
                new ObjectParameter("fkClass", fkClass) :
                new ObjectParameter("fkClass", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminAddStudentWithPerson", idStudentParameter, fkClassParameter, firstNameParameter, lastNameParameter, usernameParameter, passwordParameter);
        }
    
        public virtual int AdminAddSubject(Nullable<int> idSubject, string name, Nullable<int> term)
        {
            var idSubjectParameter = idSubject.HasValue ?
                new ObjectParameter("idSubject", idSubject) :
                new ObjectParameter("idSubject", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminAddSubject", idSubjectParameter, nameParameter, termParameter);
        }
    
        public virtual int AdminAddTeacher(Nullable<int> idTeacher, string firstName, string lastName, string username, string password)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminAddTeacher", idTeacherParameter, firstNameParameter, lastNameParameter, usernameParameter, passwordParameter);
        }
    
        public virtual int AdminCreateTeacherSubject(Nullable<int> idTeacher, Nullable<int> idSubject)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            var idSubjectParameter = idSubject.HasValue ?
                new ObjectParameter("idSubject", idSubject) :
                new ObjectParameter("idSubject", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminCreateTeacherSubject", idTeacherParameter, idSubjectParameter);
        }
    
        public virtual int AdminDeletePerson(Nullable<int> idPerson)
        {
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("idPerson", idPerson) :
                new ObjectParameter("idPerson", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminDeletePerson", idPersonParameter);
        }
    
        public virtual int AdminDeleteStudent(Nullable<int> idStudent)
        {
            var idStudentParameter = idStudent.HasValue ?
                new ObjectParameter("idStudent", idStudent) :
                new ObjectParameter("idStudent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminDeleteStudent", idStudentParameter);
        }
    
        public virtual int AdminDeleteSubject(Nullable<int> idSubject)
        {
            var idSubjectParameter = idSubject.HasValue ?
                new ObjectParameter("idSubject", idSubject) :
                new ObjectParameter("idSubject", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminDeleteSubject", idSubjectParameter);
        }
    
        public virtual int AdminDeleteTeacher(Nullable<int> idTeacher)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminDeleteTeacher", idTeacherParameter);
        }
    
        public virtual int AdminDeleteTeacherSubject(Nullable<int> idTeacher, Nullable<int> idSubject)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            var idSubjectParameter = idSubject.HasValue ?
                new ObjectParameter("idSubject", idSubject) :
                new ObjectParameter("idSubject", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminDeleteTeacherSubject", idTeacherParameter, idSubjectParameter);
        }
    
        public virtual ObjectResult<AdminGetAllStudents_Result> AdminGetAllStudents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AdminGetAllStudents_Result>("AdminGetAllStudents");
        }
    
        public virtual ObjectResult<AdminGetAllTeachers_Result> AdminGetAllTeachers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AdminGetAllTeachers_Result>("AdminGetAllTeachers");
        }
    
        public virtual int AdminModifyClassmaster(Nullable<int> idTeacher, Nullable<int> idClass)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            var idClassParameter = idClass.HasValue ?
                new ObjectParameter("idClass", idClass) :
                new ObjectParameter("idClass", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminModifyClassmaster", idTeacherParameter, idClassParameter);
        }
    
        public virtual int AdminModifyPerson(Nullable<int> idPerson, string firstName, string lastName, string username, string password)
        {
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("idPerson", idPerson) :
                new ObjectParameter("idPerson", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminModifyPerson", idPersonParameter, firstNameParameter, lastNameParameter, usernameParameter, passwordParameter);
        }
    
        public virtual int AdminModifyStudent(Nullable<int> idStudent, Nullable<int> fkClass)
        {
            var idStudentParameter = idStudent.HasValue ?
                new ObjectParameter("idStudent", idStudent) :
                new ObjectParameter("idStudent", typeof(int));
    
            var fkClassParameter = fkClass.HasValue ?
                new ObjectParameter("fkClass", fkClass) :
                new ObjectParameter("fkClass", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminModifyStudent", idStudentParameter, fkClassParameter);
        }
    
        public virtual int AdminModifySubject(Nullable<int> idSubject, string name, Nullable<int> term)
        {
            var idSubjectParameter = idSubject.HasValue ?
                new ObjectParameter("idSubject", idSubject) :
                new ObjectParameter("idSubject", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminModifySubject", idSubjectParameter, nameParameter, termParameter);
        }
    
        public virtual int AdminModifyTeacherFromSubject(Nullable<int> idOldTeacher, Nullable<int> idNewTeacher, Nullable<int> idSubject)
        {
            var idOldTeacherParameter = idOldTeacher.HasValue ?
                new ObjectParameter("idOldTeacher", idOldTeacher) :
                new ObjectParameter("idOldTeacher", typeof(int));
    
            var idNewTeacherParameter = idNewTeacher.HasValue ?
                new ObjectParameter("idNewTeacher", idNewTeacher) :
                new ObjectParameter("idNewTeacher", typeof(int));
    
            var idSubjectParameter = idSubject.HasValue ?
                new ObjectParameter("idSubject", idSubject) :
                new ObjectParameter("idSubject", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminModifyTeacherFromSubject", idOldTeacherParameter, idNewTeacherParameter, idSubjectParameter);
        }
    
        public virtual int AdminModifyTeacherSubject(Nullable<int> idOldTeacher, Nullable<int> idOldSubject, Nullable<int> idNewTeacher, Nullable<int> idNewSubject)
        {
            var idOldTeacherParameter = idOldTeacher.HasValue ?
                new ObjectParameter("idOldTeacher", idOldTeacher) :
                new ObjectParameter("idOldTeacher", typeof(int));
    
            var idOldSubjectParameter = idOldSubject.HasValue ?
                new ObjectParameter("idOldSubject", idOldSubject) :
                new ObjectParameter("idOldSubject", typeof(int));
    
            var idNewTeacherParameter = idNewTeacher.HasValue ?
                new ObjectParameter("idNewTeacher", idNewTeacher) :
                new ObjectParameter("idNewTeacher", typeof(int));
    
            var idNewSubjectParameter = idNewSubject.HasValue ?
                new ObjectParameter("idNewSubject", idNewSubject) :
                new ObjectParameter("idNewSubject", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminModifyTeacherSubject", idOldTeacherParameter, idOldSubjectParameter, idNewTeacherParameter, idNewSubjectParameter);
        }
    
        public virtual ObjectResult<Calculate_Result> Calculate(Nullable<int> idTeacher, Nullable<int> idStudent)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            var idStudentParameter = idStudent.HasValue ?
                new ObjectParameter("idStudent", idStudent) :
                new ObjectParameter("idStudent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Calculate_Result>("Calculate", idTeacherParameter, idStudentParameter);
        }
    
        public virtual int CheckCredentials(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckCredentials", usernameParameter, passwordParameter);
        }
    
        public virtual int DeleteMaterial(Nullable<int> idMaterial)
        {
            var idMaterialParameter = idMaterial.HasValue ?
                new ObjectParameter("idMaterial", idMaterial) :
                new ObjectParameter("idMaterial", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMaterial", idMaterialParameter);
        }
    
        public virtual ObjectResult<string> FindRole(Nullable<int> idPerson)
        {
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("IdPerson", idPerson) :
                new ObjectParameter("IdPerson", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FindRole", idPersonParameter);
        }
    
        public virtual ObjectResult<GetAllAbsenceBySubject_Result> GetAllAbsenceBySubject(Nullable<int> idSubject, Nullable<int> idStudent)
        {
            var idSubjectParameter = idSubject.HasValue ?
                new ObjectParameter("idSubject", idSubject) :
                new ObjectParameter("idSubject", typeof(int));
    
            var idStudentParameter = idStudent.HasValue ?
                new ObjectParameter("idStudent", idStudent) :
                new ObjectParameter("idStudent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAbsenceBySubject_Result>("GetAllAbsenceBySubject", idSubjectParameter, idStudentParameter);
        }
    
        public virtual ObjectResult<GetAllAbsencesFromClass_Result> GetAllAbsencesFromClass(Nullable<int> idTeacher)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAbsencesFromClass_Result>("GetAllAbsencesFromClass", idTeacherParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetAllClasses(Nullable<int> idTeacher)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetAllClasses", idTeacherParameter);
        }
    
        public virtual ObjectResult<GetAllCompletedSituations_Result> GetAllCompletedSituations(Nullable<int> idTeacher, Nullable<int> idStudent)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            var idStudentParameter = idStudent.HasValue ?
                new ObjectParameter("idStudent", idStudent) :
                new ObjectParameter("idStudent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCompletedSituations_Result>("GetAllCompletedSituations", idTeacherParameter, idStudentParameter);
        }
    
        public virtual int GetAllFromTable(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllFromTable", tableNameParameter);
        }
    
        public virtual ObjectResult<GetAllGradesBySubject_Result> GetAllGradesBySubject(Nullable<int> idSubject, Nullable<int> idStudent)
        {
            var idSubjectParameter = idSubject.HasValue ?
                new ObjectParameter("idSubject", idSubject) :
                new ObjectParameter("idSubject", typeof(int));
    
            var idStudentParameter = idStudent.HasValue ?
                new ObjectParameter("idStudent", idStudent) :
                new ObjectParameter("idStudent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllGradesBySubject_Result>("GetAllGradesBySubject", idSubjectParameter, idStudentParameter);
        }
    
        public virtual ObjectResult<GetAllStudentsInAClass_Result> GetAllStudentsInAClass(Nullable<int> idTeacher)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllStudentsInAClass_Result>("GetAllStudentsInAClass", idTeacherParameter);
        }
    
        public virtual ObjectResult<GetAllTeacherSubject_Result> GetAllTeacherSubject(Nullable<int> idTeacher)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTeacherSubject_Result>("GetAllTeacherSubject", idTeacherParameter);
        }
    
        public virtual ObjectResult<GetAllUnjustifiedAbsencesFromClass_Result> GetAllUnjustifiedAbsencesFromClass(Nullable<int> idTeacher)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUnjustifiedAbsencesFromClass_Result>("GetAllUnjustifiedAbsencesFromClass", idTeacherParameter);
        }
    
        public virtual int GetAssignment(Nullable<int> idTeacher, Nullable<int> idSubject, Nullable<int> idClass)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            var idSubjectParameter = idSubject.HasValue ?
                new ObjectParameter("idSubject", idSubject) :
                new ObjectParameter("idSubject", typeof(int));
    
            var idClassParameter = idClass.HasValue ?
                new ObjectParameter("idClass", idClass) :
                new ObjectParameter("idClass", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAssignment", idTeacherParameter, idSubjectParameter, idClassParameter);
        }
    
        public virtual int GetClassWhereMastert(Nullable<int> idTeacher)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetClassWhereMastert", idTeacherParameter);
        }
    
        public virtual ObjectResult<GetExpelledStudent_Result> GetExpelledStudent(Nullable<int> idClass, Nullable<int> allowAbsences)
        {
            var idClassParameter = idClass.HasValue ?
                new ObjectParameter("idClass", idClass) :
                new ObjectParameter("idClass", typeof(int));
    
            var allowAbsencesParameter = allowAbsences.HasValue ?
                new ObjectParameter("allowAbsences", allowAbsences) :
                new ObjectParameter("allowAbsences", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExpelledStudent_Result>("GetExpelledStudent", idClassParameter, allowAbsencesParameter);
        }
    
        public virtual ObjectResult<GetMaterials_Result> GetMaterials(Nullable<int> idTeacher)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMaterials_Result>("GetMaterials", idTeacherParameter);
        }
    
        public virtual int GetSubject(string name, Nullable<int> term)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSubject", nameParameter, termParameter);
        }
    
        public virtual int MakeConnectionTeacherSubject(Nullable<int> idSubject, Nullable<int> idTeacher)
        {
            var idSubjectParameter = idSubject.HasValue ?
                new ObjectParameter("idSubject", idSubject) :
                new ObjectParameter("idSubject", typeof(int));
    
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MakeConnectionTeacherSubject", idSubjectParameter, idTeacherParameter);
        }
    
        public virtual ObjectResult<StudentViewAbsences_Result> StudentViewAbsences(Nullable<int> idStudent)
        {
            var idStudentParameter = idStudent.HasValue ?
                new ObjectParameter("idStudent", idStudent) :
                new ObjectParameter("idStudent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StudentViewAbsences_Result>("StudentViewAbsences", idStudentParameter);
        }
    
        public virtual ObjectResult<StudentViewGrades_Result> StudentViewGrades(Nullable<int> idStudent)
        {
            var idStudentParameter = idStudent.HasValue ?
                new ObjectParameter("idStudent", idStudent) :
                new ObjectParameter("idStudent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StudentViewGrades_Result>("StudentViewGrades", idStudentParameter);
        }
    
        public virtual ObjectResult<StudentViewMaterials_Result> StudentViewMaterials(Nullable<int> idStudent, Nullable<int> idSubject)
        {
            var idStudentParameter = idStudent.HasValue ?
                new ObjectParameter("idStudent", idStudent) :
                new ObjectParameter("idStudent", typeof(int));
    
            var idSubjectParameter = idSubject.HasValue ?
                new ObjectParameter("idSubject", idSubject) :
                new ObjectParameter("idSubject", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StudentViewMaterials_Result>("StudentViewMaterials", idStudentParameter, idSubjectParameter);
        }
    
        public virtual ObjectResult<StudentViewSubjects_Result> StudentViewSubjects(Nullable<int> idStudent)
        {
            var idStudentParameter = idStudent.HasValue ?
                new ObjectParameter("idStudent", idStudent) :
                new ObjectParameter("idStudent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StudentViewSubjects_Result>("StudentViewSubjects", idStudentParameter);
        }
    
        public virtual int TeacherAddAbsence(Nullable<int> idTeacher, Nullable<int> idStudent, Nullable<int> idSubject, Nullable<int> term, Nullable<System.DateTime> date, Nullable<bool> canBeJustified)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            var idStudentParameter = idStudent.HasValue ?
                new ObjectParameter("idStudent", idStudent) :
                new ObjectParameter("idStudent", typeof(int));
    
            var idSubjectParameter = idSubject.HasValue ?
                new ObjectParameter("idSubject", idSubject) :
                new ObjectParameter("idSubject", typeof(int));
    
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var canBeJustifiedParameter = canBeJustified.HasValue ?
                new ObjectParameter("canBeJustified", canBeJustified) :
                new ObjectParameter("canBeJustified", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TeacherAddAbsence", idTeacherParameter, idStudentParameter, idSubjectParameter, termParameter, dateParameter, canBeJustifiedParameter);
        }
    
        public virtual int TeacherAddGrade(Nullable<int> mark, Nullable<System.DateTime> date, Nullable<bool> idMidterm, Nullable<int> idSituation)
        {
            var markParameter = mark.HasValue ?
                new ObjectParameter("mark", mark) :
                new ObjectParameter("mark", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var idMidtermParameter = idMidterm.HasValue ?
                new ObjectParameter("idMidterm", idMidterm) :
                new ObjectParameter("idMidterm", typeof(bool));
    
            var idSituationParameter = idSituation.HasValue ?
                new ObjectParameter("idSituation", idSituation) :
                new ObjectParameter("idSituation", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TeacherAddGrade", markParameter, dateParameter, idMidtermParameter, idSituationParameter);
        }
    
        public virtual int TeacherDeleteGrade(Nullable<int> idGrade)
        {
            var idGradeParameter = idGrade.HasValue ?
                new ObjectParameter("idGrade", idGrade) :
                new ObjectParameter("idGrade", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TeacherDeleteGrade", idGradeParameter);
        }
    
        public virtual int TeacherGetSituation(Nullable<int> idTeacher, Nullable<int> idStudent, string name, Nullable<int> term)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            var idStudentParameter = idStudent.HasValue ?
                new ObjectParameter("idStudent", idStudent) :
                new ObjectParameter("idStudent", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TeacherGetSituation", idTeacherParameter, idStudentParameter, nameParameter, termParameter);
        }
    
        public virtual int TeacherJustifyAbsence(Nullable<int> idTeacher, Nullable<int> idStudent, Nullable<int> idSubject, Nullable<int> term, Nullable<int> idAbsence)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            var idStudentParameter = idStudent.HasValue ?
                new ObjectParameter("idStudent", idStudent) :
                new ObjectParameter("idStudent", typeof(int));
    
            var idSubjectParameter = idSubject.HasValue ?
                new ObjectParameter("idSubject", idSubject) :
                new ObjectParameter("idSubject", typeof(int));
    
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            var idAbsenceParameter = idAbsence.HasValue ?
                new ObjectParameter("idAbsence", idAbsence) :
                new ObjectParameter("idAbsence", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TeacherJustifyAbsence", idTeacherParameter, idStudentParameter, idSubjectParameter, termParameter, idAbsenceParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TeacherSelectGradeAfterStudent(Nullable<int> idTeacher, Nullable<int> idStudent, string name, Nullable<int> term)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            var idStudentParameter = idStudent.HasValue ?
                new ObjectParameter("idStudent", idStudent) :
                new ObjectParameter("idStudent", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TeacherSelectGradeAfterStudent", idTeacherParameter, idStudentParameter, nameParameter, termParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TeacherUpdateSituation(Nullable<int> idSubject, Nullable<int> idStudent, Nullable<int> idTeacher)
        {
            var idSubjectParameter = idSubject.HasValue ?
                new ObjectParameter("IdSubject", idSubject) :
                new ObjectParameter("IdSubject", typeof(int));
    
            var idStudentParameter = idStudent.HasValue ?
                new ObjectParameter("IdStudent", idStudent) :
                new ObjectParameter("IdStudent", typeof(int));
    
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("IdTeacher", idTeacher) :
                new ObjectParameter("IdTeacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TeacherUpdateSituation", idSubjectParameter, idStudentParameter, idTeacherParameter);
        }
    
        public virtual ObjectResult<TeacherViewAllAbsence_Result> TeacherViewAllAbsence(Nullable<int> idTeacher, Nullable<int> idStudent, Nullable<int> idSubject, Nullable<int> term)
        {
            var idTeacherParameter = idTeacher.HasValue ?
                new ObjectParameter("idTeacher", idTeacher) :
                new ObjectParameter("idTeacher", typeof(int));
    
            var idStudentParameter = idStudent.HasValue ?
                new ObjectParameter("idStudent", idStudent) :
                new ObjectParameter("idStudent", typeof(int));
    
            var idSubjectParameter = idSubject.HasValue ?
                new ObjectParameter("idSubject", idSubject) :
                new ObjectParameter("idSubject", typeof(int));
    
            var termParameter = term.HasValue ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TeacherViewAllAbsence_Result>("TeacherViewAllAbsence", idTeacherParameter, idStudentParameter, idSubjectParameter, termParameter);
        }
    
        public virtual ObjectResult<ViewAwarded_Result> ViewAwarded(Nullable<int> idClass)
        {
            var idClassParameter = idClass.HasValue ?
                new ObjectParameter("IdClass", idClass) :
                new ObjectParameter("IdClass", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewAwarded_Result>("ViewAwarded", idClassParameter);
        }
    
        public virtual ObjectResult<ViewClassHierachy_Result> ViewClassHierachy(Nullable<int> idClass)
        {
            var idClassParameter = idClass.HasValue ?
                new ObjectParameter("IdClass", idClass) :
                new ObjectParameter("IdClass", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewClassHierachy_Result>("ViewClassHierachy", idClassParameter);
        }
    
        public virtual ObjectResult<ViewCorigentStudents_Result> ViewCorigentStudents(Nullable<int> idClassmaster)
        {
            var idClassmasterParameter = idClassmaster.HasValue ?
                new ObjectParameter("idClassmaster", idClassmaster) :
                new ObjectParameter("idClassmaster", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewCorigentStudents_Result>("ViewCorigentStudents", idClassmasterParameter);
        }
    }
}
